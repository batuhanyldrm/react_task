{"ast":null,"code":"var _jsxFileName = \"/Users/batuhan/Desktop/React_task/src/components/Order.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Button from '@mui/material/Button';\nimport DialogActions from '@mui/material/DialogActions';\nimport TextField from '@mui/material/TextField';\nimport DialogContent from '@mui/material/DialogContent';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport { updateProductAmount } from './api/productApi';\nimport { updateProductStock } from './actions/productActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Order(props) {\n  _s();\n  const {\n    products,\n    open,\n    updateProductStock,\n    orderPopUpClose,\n    fetchProducts\n  } = props;\n  const [selectedProduct, setSelectedProduct] = useState({});\n  const [amount, setAmount] = useState(0);\n  const [updateAlert, setUpdateAlert] = useState({\n    open: false,\n    message: \"\",\n    status: \"\"\n  });\n  const handleSave = async () => {\n    if (amount > selectedProduct.amount) {\n      setUpdateAlert({\n        open: true,\n        message: \"There are not enough products\",\n        status: \"error\"\n      });\n      console.log(\"hata\");\n    } else {\n      await updateProductAmount(selectedProduct.id, amount).then(() => {\n        updateProductStock(selectedProduct.id, amount);\n        setUpdateAlert({\n          open: true,\n          message: \"saved succesfully\",\n          status: \"success\"\n        });\n      }).finally(() => {\n        fetchProducts();\n        orderPopUpClose(false);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: orderPopUpClose,\n      \"aria-labelledby\": \"alert-dialog-title\",\n      \"aria-describedby\": \"alert-dialog-description\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"alert-dialog-title\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: \"Use Product\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"grid\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            variant: \"standard\",\n            sx: {\n              m: 1,\n              minWidth: 120\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"demo-simple-select-standard-label\",\n              children: \"Product Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"demo-simple-select-standard-label\",\n              id: \"demo-simple-select-standard\",\n              value: selectedProduct.productName || \"\",\n              label: \"Product Name\",\n              children: products.products && products.products.map(product => {\n                return /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: product.productName,\n                  onClick: () => setSelectedProduct(product),\n                  children: product.productName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 31\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            value: amount,\n            onChange: e => setAmount(parseInt(e.target.value)),\n            autoFocus: true,\n            margin: \"normal\",\n            id: \"amount\",\n            label: \"Amount\",\n            type: \"number\",\n            variant: \"outlined\",\n            size: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: orderPopUpClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => handleSave(),\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n        open: updateAlert.open,\n        autoHideDuration: 3000,\n        style: {\n          zIndex: \"1001\"\n        },\n        onClose: () => setUpdateAlert({\n          open: false,\n          message: \"\",\n          status: \"\"\n        }),\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          severity: updateAlert.status || \"info\",\n          children: updateAlert.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(Order, \"m0D357uhdB0egxn2V54iB/4OhKk=\");\n_c = Order;\nconst mapStateToProps = state => ({});\nconst mapDispatchToProps = dispatch => ({\n  updateProductStock: (id, amount) => {\n    dispatch(updateProductStock(id, amount));\n  }\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Order);\nvar _c;\n$RefreshReg$(_c, \"Order\");","map":{"version":3,"names":["React","useState","connect","Dialog","DialogTitle","Button","DialogActions","TextField","DialogContent","InputLabel","MenuItem","FormControl","Select","SelectChangeEvent","Snackbar","Alert","updateProductAmount","updateProductStock","Order","props","products","open","orderPopUpClose","fetchProducts","selectedProduct","setSelectedProduct","amount","setAmount","updateAlert","setUpdateAlert","message","status","handleSave","console","log","id","then","finally","textAlign","display","m","minWidth","productName","map","product","e","parseInt","target","value","zIndex","mapStateToProps","state","mapDispatchToProps","dispatch"],"sources":["/Users/batuhan/Desktop/React_task/src/components/Order.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Button from '@mui/material/Button';\nimport DialogActions from '@mui/material/DialogActions';\nimport TextField from '@mui/material/TextField';\nimport DialogContent from '@mui/material/DialogContent';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select, { SelectChangeEvent } from '@mui/material/Select'\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport { updateProductAmount } from './api/productApi';\nimport { updateProductStock } from './actions/productActions';\n\nfunction Order(props) {\n\n    const {products, open, updateProductStock, orderPopUpClose, fetchProducts} = props\n\n    const [selectedProduct, setSelectedProduct] = useState({})\n    const [amount, setAmount] = useState(0)\n    const [updateAlert, setUpdateAlert] = useState({ open: false, message: \"\", status: \"\" })\n\n    const handleSave = async () => {\n        if (amount > selectedProduct.amount) {\n          setUpdateAlert({ open: true, message: \"There are not enough products\", status: \"error\" })\n            console.log(\"hata\")\n        }\n        else{\n           await updateProductAmount(selectedProduct.id,amount)\n            .then(() => {\n                updateProductStock(selectedProduct.id,amount)\n                setUpdateAlert({ open: true, message: \"saved succesfully\", status: \"success\" })\n            }).finally(() => {\n                fetchProducts()\n                orderPopUpClose(false)\n            })\n        }\n    }\n\n\n    return(\n    <div>\n        <Dialog\n          open={open}\n          onClose={orderPopUpClose}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n          fullWidth\n        >\n          <DialogTitle id=\"alert-dialog-title\">\n            <div style={{ textAlign : \"center\" }}>\n              Use Product\n            </div>\n          </DialogTitle>\n          <DialogContent>\n            <div style={{display:\"grid\"}}>\n                    <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\n                    <InputLabel id=\"demo-simple-select-standard-label\">Product Name</InputLabel>\n                    <Select\n                      labelId=\"demo-simple-select-standard-label\"\n                      id=\"demo-simple-select-standard\"\n                      value={selectedProduct.productName || \"\"}\n                      label=\"Product Name\"\n                    >\n                    {products.products && products.products.map((product) => {\n                       return <MenuItem value={product.productName} onClick={() => setSelectedProduct(product)}>{product.productName}</MenuItem>\n                    })}\n                    </Select>\n                  </FormControl>\n          <TextField\n            value={amount}\n            onChange={(e) => setAmount(parseInt(e.target.value))}\n            autoFocus\n            margin=\"normal\"\n            id=\"amount\"\n            label=\"Amount\"\n            type=\"number\"\n            variant=\"outlined\"\n            size='small'\n          />\n          </div>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={orderPopUpClose}>Cancel</Button>\n            <Button onClick={() => handleSave()}>Save</Button>\n          </DialogActions>\n          <Snackbar\n                open={updateAlert.open}\n                autoHideDuration={3000}\n                style={{zIndex:\"1001\"}}\n                onClose={() => setUpdateAlert({ open: false, message: \"\", status: \"\" })}\n            >\n                <Alert severity={updateAlert.status || \"info\"}>\n                    {updateAlert.message}\n                </Alert>\n            </Snackbar>\n      </Dialog>\n    </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    updateProductStock: (id, amount) => {\n        dispatch(updateProductStock(id, amount))\n    },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Order)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}